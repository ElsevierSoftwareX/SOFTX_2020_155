#
# Sample configuration file for ISC dhcpd for Debian
#
#

# The ddns-updates-style parameter controls whether or not the server will
# attempt to do a DNS update when a lease is confirmed. We default to the
# behavior of the version 2 packages ('none', since DHCP v2 didn't
# have support for DDNS.)
ddns-update-style none;

# option definitions common to all supported networks...
option domain-name-servers 208.69.128.3, 208.69.128.4;
option domain-name "ligo-la.caltech.edu";

default-lease-time 600;
max-lease-time 7200;

# If this DHCP server is the official DHCP server for the local
# network, the authoritative directive should be uncommented.
#authoritative;

# Use this to send dhcp log messages to a different log file (you also
# have to hack syslog.conf to complete the redirection).
#log-facility local7;

# No service will be given on this subnet, but declaring it helps the 
# DHCP server to understand the network topology.

#subnet 10.152.187.0 netmask 255.255.255.0 {
#}

# This is a very basic subnet declaration.

#subnet 10.254.239.0 netmask 255.255.255.224 {
#  range 10.254.239.10 10.254.239.20;
#  option routers rtr-239-0-1.example.org, rtr-239-0-2.example.org;
#}

# This declaration allows BOOTP clients to get dynamic addresses,
# which we don't really recommend.

#subnet 10.254.239.32 netmask 255.255.255.224 {
#  range dynamic-bootp 10.254.239.40 10.254.239.60;
#  option broadcast-address 10.254.239.31;
#  option routers rtr-239-32-1.example.org;
#}

# allow booting
allow booting;
allow bootp;

# Declare the subnet where our diskless nodes will live
subnet 10.144.0.0 netmask 255.255.255.0 {
  option broadcast-address 10.144.0.255;
  option routers 10.144.0.1;
# define TFTP server, PXE boot file
  next-server 10.144.0.20;
  filename "pxelinux.0";
}
# Add one host declaration for each diskless host
  host x2lsc0 {
# 10fast
#        hardware ethernet 0C:C4:7A:47:B1:06; 
# SLOW
         hardware ethernet 00:25:90:0D:78:74;
        fixed-address 10.144.0.30;
  }

  host x2oaf0 {
        option host-name "x2oaf0"; 
	hardware ethernet 00:25:90:37:FC:90;
        fixed-address 10.144.0.34;
  }

  host x2susex {
#  10fast
#       hardware ethernet 0C:C4:7A:47:B1:06; 
#  6fast
#	hardware ethernet 0C:C4:7A:05:FF:20;
#  SLOW
	hardware ethernet 00:25:90:0D:77:3E;
# 10fast 2017
#	hardware ethernet 0C:C4:7A:DC:83:56;
	fixed-address 10.144.0.31;
  }

  host x2seiex {
        hardware ethernet 00:25:90:37:FA:56;
        fixed-address 10.144.0.32;
  }

  host x2iscex {
	hardware ethernet 00:25:90:37:F9:A0;
        fixed-address 10.144.0.33;
  }

# RFM network machine
  host x2cdsrfm {
# 6fast	
#	hardware ethernet 0C:C4:7A:05:FF:20;
# 10fast 2017
	hardware ethernet 0C:C4:7A:DC:83:56;
       	fixed-address 10.144.0.40;
  }

#}

# Hosts which require special configuration options can be listed in
# host statements.   If no address is specified, the address will be
# allocated dynamically (if possible), but the host-specific information
# will still come from the host declaration.

#host passacaglia {
#  hardware ethernet 0:0:c0:5d:bd:95;
#  filename "vmunix.passacaglia";
#  server-name "toccata.fugue.com";
#}

# Fixed IP addresses can also be specified for hosts.   These addresses
# should not also be listed as being available for dynamic assignment.
# Hosts for which fixed IP addresses have been specified can boot using
# BOOTP or DHCP.   Hosts for which no fixed address is specified can only
# be booted with DHCP, unless there is an address range on the subnet
# to which a BOOTP client is connected which has the dynamic-bootp flag
# set.
#host fantasia {
#  hardware ethernet 08:00:07:26:c0:a5;
#  fixed-address fantasia.fugue.com;
#}

# You can declare a class of clients and then do address allocation
# based on that.   The example below shows a case where all clients
# in a certain class get addresses on the 10.17.224/24 subnet, and all
# other clients get addresses on the 10.0.29/24 subnet.

#class "foo" {
#  match if substring (option vendor-class-identifier, 0, 4) = "SUNW";
#}

#shared-network 224-29 {
#  subnet 10.17.224.0 netmask 255.255.255.0 {
#    option routers rtr-224.example.org;
#  }
#  subnet 10.0.29.0 netmask 255.255.255.0 {
#    option routers rtr-29.example.org;
#  }
#  pool {
#    allow members of "foo";
#    range 10.17.224.10 10.17.224.250;
#  }
#  pool {
#    deny members of "foo";
#    range 10.0.29.10 10.0.29.230;
#  }
#}

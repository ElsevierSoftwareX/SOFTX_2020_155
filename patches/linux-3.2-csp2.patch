diff -r -u -d linux-source-3.2.orig/arch/x86/kernel/smpboot.c linux-source-3.2/arch/x86/kernel/smpboot.c
--- linux-source-3.2.orig/arch/x86/kernel/smpboot.c	2012-03-19 09:03:17.000000000 -0700
+++ linux-source-3.2/arch/x86/kernel/smpboot.c	2012-04-02 16:32:21.399091504 -0700
@@ -1316,6 +1316,21 @@
 	pr_err("CPU %u didn't die...\n", cpu);
 }
 
+static DEFINE_PER_CPU(void (*)(void), fe_code);
+
+
+int is_cpu_taken_by_rcg_model(unsigned int cpu) {
+        return 0 != per_cpu(fe_code, cpu);
+}
+EXPORT_SYMBOL(is_cpu_taken_by_rcg_model);
+
+void set_fe_code_idle(void (*ptr)(void), unsigned int cpu) {
+       per_cpu(fe_code, cpu) = ptr;
+}
+
+EXPORT_SYMBOL(set_fe_code_idle);
+
+
 void play_dead_common(void)
 {
 	idle_task_exit();
@@ -1330,6 +1339,10 @@
 	 * With physical CPU hotplug, we should halt the cpu
 	 */
 	local_irq_disable();
+        if (per_cpu(fe_code, smp_processor_id())) {
+	       // Execute front-end code
+	       (*per_cpu(fe_code, smp_processor_id()))();
+	}
 }
 
 /*
diff -r -u -d linux-source-3.2.orig/include/linux/printk.h linux-source-3.2/include/linux/printk.h
--- linux-source-3.2.orig/include/linux/printk.h 2012-12-14 11:52:32.257855726 -0800
+++ linux-source-3.2/include/linux/printk.h      2012-10-16 19:50:15.000000000 -0700
@@ -100,6 +100,11 @@
 asmlinkage __printf(1, 2) __cold
 int printk(const char *fmt, ...);
 
+asmlinkage __printf(1, 0)
+int vprintkl(const char *fmt, va_list args);
+asmlinkage __printf(1, 2) __cold
+int printkl(const char * fmt, ...);
+
 /*
  * Please don't use printk_ratelimit(), because it shares ratelimiting state
  * with all other unrelated printk_ratelimit() callsites.  Instead use
diff -r -u -d linux-source-3.2.orig/kernel/cpu.c linux-source-3.2/kernel/cpu.c
--- linux-source-3.2.orig/kernel/cpu.c	2012-03-19 09:03:17.000000000 -0700
+++ linux-source-3.2/kernel/cpu.c	2012-04-02 16:32:21.399091504 -0700
@@ -381,6 +381,8 @@
 	return err;
 }
 
+EXPORT_SYMBOL(cpu_up);
+
 #ifdef CONFIG_PM_SLEEP_SMP
 static cpumask_var_t frozen_cpus;
 
--- linux-source-3.2.orig/kernel/printk.c	2017-04-27 10:13:30.000000000 -0500
+++ linux-source-3.2/kernel/printk.c	2017-08-10 14:37:25.165270877 -0500
@@ -769,6 +758,18 @@
 	return r;
 }
 
+asmlinkage int printkl(const char *fmt, ...)
+{
+	va_list args;
+	int r;
+
+	va_start(args, fmt);
+	r = vprintkl(fmt, args);
+	va_end(args);
+
+	return r;
+}
+
 /* cpu currently holding logbuf_lock */
 static volatile unsigned int printk_cpu = UINT_MAX;
 
@@ -826,6 +827,7 @@
 static int recursion_bug;
 static int new_text_line = 1;
 static char printk_buf[1024];
+static char printkl_buf[1024];
 
 int printk_delay_msec __read_mostly;
 
@@ -981,8 +983,157 @@
 	preempt_enable();
 	return printed_len;
 }
+
+asmlinkage int vprintkl(const char *fmt, va_list args)
+{
+	int printed_len = 0;
+	int current_log_level = default_message_loglevel;
+	unsigned long flags;
+	int this_cpu;
+	char *p;
+	size_t plen;
+	char special;
+#if 0
+	boot_delay_msec();
+	printk_delay();
+
+	preempt_disable();
+	/* This stops the holder of console_sem just where we want him */
+	raw_local_irq_save(flags);
+	this_cpu = smp_processor_id();
+
+	/*
+	 * Ouch, printk recursed into itself!
+	 */
+	if (unlikely(printk_cpu == this_cpu)) {
+		/*
+		 * If a crash is occurring during printk() on this CPU,
+		 * then try to get the crash message out but make sure
+		 * we can't deadlock. Otherwise just return to avoid the
+		 * recursion and return - but flag the recursion so that
+		 * it can be printed at the next appropriate moment:
+		 */
+		if (!oops_in_progress) {
+			recursion_bug = 1;
+			goto out_restore_irqs;
+		}
+		zap_locks();
+	}
+
+	lockdep_off();
+#endif
+	raw_spin_lock(&logbuf_lock);
+#if 0
+	printk_cpu = this_cpu;
+
+	if (recursion_bug) {
+		recursion_bug = 0;
+		strcpy(printk_buf, recursion_bug_msg);
+		printed_len = strlen(recursion_bug_msg);
+	}
+#endif
+	/* Emit the output into the temporary buffer */
+	printed_len += vscnprintf(printkl_buf + printed_len,
+				  sizeof(printkl_buf) - printed_len, fmt, args);
+
+	p = printkl_buf;
+
+	/* Read log level and handle special printk prefix */
+	plen = log_prefix(p, &current_log_level, &special);
+	if (plen) {
+		p += plen;
+
+		switch (special) {
+		case 'c': /* Strip <c> KERN_CONT, continue line */
+			plen = 0;
+			break;
+		case 'd': /* Strip <d> KERN_DEFAULT, start new line */
+			plen = 0;
+		default:
+			if (!new_text_line) {
+				emit_log_char('\n');
+				new_text_line = 1;
+			}
+		}
+	}
+
+	/*
+	 * Copy the output into log_buf. If the caller didn't provide
+	 * the appropriate log prefix, we insert them here
+	 */
+	for (; *p; p++) {
+		if (new_text_line) {
+			new_text_line = 0;
+
+			if (plen) {
+				/* Copy original log prefix */
+				int i;
+
+				for (i = 0; i < plen; i++)
+					emit_log_char(printk_buf[i]);
+				printed_len += plen;
+			} else {
+				/* Add log prefix */
+				emit_log_char('<');
+				emit_log_char(current_log_level + '0');
+				emit_log_char('>');
+				printed_len += 3;
+			}
+
+			if (printk_time) {
+				/* Add the current time stamp */
+				char tbuf[50], *tp;
+				unsigned tlen;
+				unsigned long long t;
+				unsigned long nanosec_rem;
+
+				t = cpu_clock(printk_cpu);
+				nanosec_rem = do_div(t, 1000000000);
+				tlen = sprintf(tbuf, "[%5lu.%06lu] ",
+						(unsigned long) t,
+						nanosec_rem / 1000);
+
+				for (tp = tbuf; tp < tbuf + tlen; tp++)
+					emit_log_char(*tp);
+				printed_len += tlen;
+			}
+
+			if (!*p)
+				break;
+		}
+
+		emit_log_char(*p);
+		if (*p == '\n')
+			new_text_line = 1;
+	}
+
+#if 0
+	/*
+	 * Try to acquire and then immediately release the
+	 * console semaphore. The release will do all the
+	 * actual magic (print out buffers, wake up klogd,
+	 * etc). 
+	 *
+	 * The console_trylock_for_printk() function
+	 * will release 'logbuf_lock' regardless of whether it
+	 * actually gets the semaphore or not.
+	 */
+	if (console_trylock_for_printk(this_cpu))
+		console_unlock();
+
+	lockdep_on();
+out_restore_irqs:
+	raw_local_irq_restore(flags);
+
+	preempt_enable();
+#endif
+	raw_spin_unlock(&logbuf_lock);
+	return printed_len;
+}
 EXPORT_SYMBOL(printk);
+EXPORT_SYMBOL(printkl);
 EXPORT_SYMBOL(vprintk);
+EXPORT_SYMBOL(vprintkl);
 
 #else


#!/bin/bash

CWD="@CMAKE_CURRENT_BINARY_DIR@"

TDIR=""
PID_MULTI_STREAM1=0
PID_DAQD=0

function kill_proc {
    if [ $1 -gt 0 ]; then
        echo "Closing process $1"
        kill $1
    fi
}

function cleanup {
    rm -rf daqdrc_broadcast_test_final
    if [ "x$TDIR" != "x" ]; then
        if [ -d $TDIR ]; then
            rm -rf "$TDIR"
        fi
    fi
    kill_proc $PID_MULTI_STREAM1
    kill_proc $PID_DAQD
}

MUTLI_STREAM="$CWD/../fe_stream_test/fe_multi_stream_test"
if [ ! -x "$MUTLI_STREAM" ]; then
    echo "cannot find $MULTI_STREAM"
    exit 1
fi

DAQD="$CWD/../daqd/daqd"
if [ ! -x "$DAQD" ]; then
    echo "cannot find $DAQD"
    exit 1
fi

if [ ! -r /dev/gpstime ]; then
  echo "the gpstime module must be loaded, configured, and accessible by this user"
  exit 1
fi

if [ ! -r /dev/mbuf ]; then
  echo "the mbuf module must be loaded, configured, and accessible by this user"
  exit 1
fi

PYTHON=""
which python > /dev/null
if [ $? -eq 0 ]; then
    PYTHON=`which python`
else
    which python3 > /dev/null
    if [ $? -eq 0 ]; then
        PYTHON=`which python3`
    else
        echo "Cannot find python or python3"
        exit 1
    fi
fi

trap cleanup EXIT

TDIR=`$PYTHON -c "from __future__ import print_function; import tempfile; print(tempfile.mkdtemp())"`
mkdir "$TDIR/ini_files"
mkdir "$TDIR/logs"

echo "Ini dir = $TDIR/ini_files"

"$MUTLI_STREAM" -i "$TDIR/ini_files" -M "$TDIR/ini_files/master" -b local_dc -m 100 -k 300 -R 247 > "$TDIR/logs/multi_stream" &
PID_MULTI_STREAM1=$!

echo "Streamer PID = $PID_MULTI_STREAM1"

sleep 1

MASTER_FILE="$TDIR/ini_files/master"
TESTPOINT_FILE=""
BROADCAST_FILE="$TDIR/ini_files/broadcast"
cat daqdrc_broadcast_test | sed s\|MASTER\|$MASTER_FILE\| | sed s\|TESTPOINT\|$TESTPOINT_FILE\| | sed s\|BCAST\|$BROADCAST_FILE\| > daqdrc_broadcast_test_final

echo "[X1:NON_EXISTANT1]" > $BROADCAST_FILE
echo "[X1:NON_EXISTANT2]" >> $BROADCAST_FILE
echo "[X1:NON_EXISTANT3]" >> $BROADCAST_FILE

"$DAQD" -c daqdrc_broadcast_test_final &> "$TDIR/logs/daqd" &
PID_DAQD=$!

echo "Sleeping to allow the daq to run"
sleep 10

if [ -d "/proc/$PID_DAQD" ]; then
    echo "daqd process did not terminate as expected"
    exit 1
fi
echo "daqd is terminated as expected"
PID_DAQD=0

grep "The GDS broadcast list requests channels that are not available" $TDIR/logs/daqd
RESULT=$?
if [ "$RESULT" -ne "0" ]; then
    echo "Missing expected error message in the logs"
    exit 1
fi

echo "Test successful"
exit 0
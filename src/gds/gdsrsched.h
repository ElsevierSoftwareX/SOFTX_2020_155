/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _GDSRSCHED_H_RPCGEN
#define	_GDSRSCHED_H_RPCGEN

#ifndef _KERNEL
#endif /* !_KERNEL */

#ifdef __cplusplus
extern "C" {
#endif

#define		_RPC_HDR
#include "dtt/rpcinc.h"

typedef longlong_t tainsec_r;
#define	ADDRLEN 8
#define	RTIMETAG_LENGTH 17

struct scheduler_r {
	char scheduler_r[ADDRLEN];
};
typedef struct scheduler_r scheduler_r;

struct schedulertask_r {
	int flag;
	int priority;
	int tagtype;
	int synctype;
	int syncval;
	int waittype;
	int repeattype;
	int repeatval;
	int repeatratetype;
	int repeatrate;
	int repeatsynctype;
	int repeatsyncval;
	int func;
	int arg_sizeof;
	tainsec_r timeout;
	tainsec_r waitval;
	char timetag[RTIMETAG_LENGTH];
	char waittag[RTIMETAG_LENGTH];
	struct {
		u_int arg_len;
		char *arg_val;
	} arg;
};
typedef struct schedulertask_r schedulertask_r;

struct resultGetScheduledTask_r {
	int status;
	schedulertask_r task;
};
typedef struct resultGetScheduledTask_r resultGetScheduledTask_r;

struct remotesched_r {
	int status;
	scheduler_r sd;
};
typedef struct remotesched_r remotesched_r;

struct closescheduler_1_argument {
	scheduler_r *sd;
	tainsec_r timeout;
};
typedef struct closescheduler_1_argument closescheduler_1_argument;

struct scheduletask_1_argument {
	scheduler_r *sd;
	schedulertask_r *newtask;
};
typedef struct scheduletask_1_argument scheduletask_1_argument;

struct getscheduledtask_1_argument {
	scheduler_r *sd;
	int id;
};
typedef struct getscheduledtask_1_argument getscheduledtask_1_argument;

struct removescheduledtask_1_argument {
	scheduler_r *sd;
	int id;
	int terminate;
};
typedef struct removescheduledtask_1_argument removescheduledtask_1_argument;

struct waitforschedulertofinish_1_argument {
	scheduler_r *sd;
	tainsec_r timeout;
};
typedef struct waitforschedulertofinish_1_argument waitforschedulertofinish_1_argument;

struct settagnotify_1_argument {
	scheduler_r *sd;
	char *tag;
	tainsec_r time;
};
typedef struct settagnotify_1_argument settagnotify_1_argument;

struct connectscheduler_1_argument {
	scheduler_r *callbacksd;
	u_int callbackprogram;
	u_int callbackversion;
};
typedef struct connectscheduler_1_argument connectscheduler_1_argument;

#define	GDSSCHEDULER	0x30000000
#define	SCHEDVER	1

#if defined(__STDC__) || defined(__cplusplus)
#define	CLOSESCHEDULER	1
extern  enum clnt_stat closescheduler_1(scheduler_r *, tainsec_r , int *, CLIENT *);
extern  bool_t closescheduler_1_svc(scheduler_r *, tainsec_r , int *, struct svc_req *);
#define	SCHEDULETASK	2
extern  enum clnt_stat scheduletask_1(scheduler_r *, schedulertask_r *, int *, CLIENT *);
extern  bool_t scheduletask_1_svc(scheduler_r *, schedulertask_r *, int *, struct svc_req *);
#define	GETSCHEDULEDTASK	3
extern  enum clnt_stat getscheduledtask_1(scheduler_r *, int , resultGetScheduledTask_r *, CLIENT *);
extern  bool_t getscheduledtask_1_svc(scheduler_r *, int , resultGetScheduledTask_r *, struct svc_req *);
#define	REMOVESCHEDULEDTASK	4
extern  enum clnt_stat removescheduledtask_1(scheduler_r *, int , int , int *, CLIENT *);
extern  bool_t removescheduledtask_1_svc(scheduler_r *, int , int , int *, struct svc_req *);
#define	WAITFORSCHEDULERTOFINISH	5
extern  enum clnt_stat waitforschedulertofinish_1(scheduler_r *, tainsec_r , int *, CLIENT *);
extern  bool_t waitforschedulertofinish_1_svc(scheduler_r *, tainsec_r , int *, struct svc_req *);
#define	SETTAGNOTIFY	6
extern  enum clnt_stat settagnotify_1(scheduler_r *, char *, tainsec_r , int *, CLIENT *);
extern  bool_t settagnotify_1_svc(scheduler_r *, char *, tainsec_r , int *, struct svc_req *);
#define	CONNECTSCHEDULER	7
extern  enum clnt_stat connectscheduler_1(scheduler_r *, u_int , u_int , remotesched_r *, CLIENT *);
extern  bool_t connectscheduler_1_svc(scheduler_r *, u_int , u_int , remotesched_r *, struct svc_req *);
extern int gdsscheduler_1_freeresult(SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define	CLOSESCHEDULER	1
extern  enum clnt_stat closescheduler_1();
extern  bool_t closescheduler_1_svc();
#define	SCHEDULETASK	2
extern  enum clnt_stat scheduletask_1();
extern  bool_t scheduletask_1_svc();
#define	GETSCHEDULEDTASK	3
extern  enum clnt_stat getscheduledtask_1();
extern  bool_t getscheduledtask_1_svc();
#define	REMOVESCHEDULEDTASK	4
extern  enum clnt_stat removescheduledtask_1();
extern  bool_t removescheduledtask_1_svc();
#define	WAITFORSCHEDULERTOFINISH	5
extern  enum clnt_stat waitforschedulertofinish_1();
extern  bool_t waitforschedulertofinish_1_svc();
#define	SETTAGNOTIFY	6
extern  enum clnt_stat settagnotify_1();
extern  bool_t settagnotify_1_svc();
#define	CONNECTSCHEDULER	7
extern  enum clnt_stat connectscheduler_1();
extern  bool_t connectscheduler_1_svc();
extern int gdsscheduler_1_freeresult();
#endif /* K&R C */

struct settagcallback_1_argument {
	scheduler_r *sd;
	scheduler_r *bsd;
	char *tag;
	tainsec_r time;
};
typedef struct settagcallback_1_argument settagcallback_1_argument;

#define	GDSSCHEDULERCALLBACK	0x40000000
#define	SCHEDVERCALLBACK	1

#if defined(__STDC__) || defined(__cplusplus)
#define	SETTAGCALLBACK	1
extern  enum clnt_stat settagcallback_1(scheduler_r *, scheduler_r *, char *, tainsec_r , int *, CLIENT *);
extern  bool_t settagcallback_1_svc(scheduler_r *, scheduler_r *, char *, tainsec_r , int *, struct svc_req *);
extern int gdsschedulercallback_1_freeresult(SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define	SETTAGCALLBACK	1
extern  enum clnt_stat settagcallback_1();
extern  bool_t settagcallback_1_svc();
extern int gdsschedulercallback_1_freeresult();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_tainsec_r(XDR *, tainsec_r*);
extern  bool_t xdr_scheduler_r(XDR *, scheduler_r*);
extern  bool_t xdr_schedulertask_r(XDR *, schedulertask_r*);
extern  bool_t xdr_resultGetScheduledTask_r(XDR *, resultGetScheduledTask_r*);
extern  bool_t xdr_remotesched_r(XDR *, remotesched_r*);
extern  bool_t xdr_closescheduler_1_argument(XDR *, closescheduler_1_argument*);
extern  bool_t xdr_scheduletask_1_argument(XDR *, scheduletask_1_argument*);
extern  bool_t xdr_getscheduledtask_1_argument(XDR *, getscheduledtask_1_argument*);
extern  bool_t xdr_removescheduledtask_1_argument(XDR *, removescheduledtask_1_argument*);
extern  bool_t xdr_waitforschedulertofinish_1_argument(XDR *, waitforschedulertofinish_1_argument*);
extern  bool_t xdr_settagnotify_1_argument(XDR *, settagnotify_1_argument*);
extern  bool_t xdr_connectscheduler_1_argument(XDR *, connectscheduler_1_argument*);
extern  bool_t xdr_settagcallback_1_argument(XDR *, settagcallback_1_argument*);

#else /* K&R C */
extern bool_t xdr_tainsec_r();
extern bool_t xdr_scheduler_r();
extern bool_t xdr_schedulertask_r();
extern bool_t xdr_resultGetScheduledTask_r();
extern bool_t xdr_remotesched_r();
extern bool_t xdr_closescheduler_1_argument();
extern bool_t xdr_scheduletask_1_argument();
extern bool_t xdr_getscheduledtask_1_argument();
extern bool_t xdr_removescheduledtask_1_argument();
extern bool_t xdr_waitforschedulertofinish_1_argument();
extern bool_t xdr_settagnotify_1_argument();
extern bool_t xdr_connectscheduler_1_argument();
extern bool_t xdr_settagcallback_1_argument();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_GDSRSCHED_H_RPCGEN */

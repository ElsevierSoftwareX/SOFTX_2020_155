/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _RTESTPOINT_H_RPCGEN
#define _RTESTPOINT_H_RPCGEN



#ifdef __cplusplus
extern "C" {
#endif

#define _RPC_HDR
#include "dtt/rpcinc.h"

typedef struct {
	u_int TP_r_len;
	u_int *TP_r_val;
} TP_r;

struct resultRequestTP_r {
	int status;
	u_long time;
	int epoch;
};
typedef struct resultRequestTP_r resultRequestTP_r;

struct resultQueryTP_r {
	int status;
	TP_r tp;
};
typedef struct resultQueryTP_r resultQueryTP_r;

struct requesttp_1_argument {
	int id;
	int node;
	TP_r tp;
	quad_t timeout;
};
typedef struct requesttp_1_argument requesttp_1_argument;

struct requesttpname_1_argument {
	int id;
	char *tpnames;
	quad_t timeout;
};
typedef struct requesttpname_1_argument requesttpname_1_argument;

struct cleartp_1_argument {
	int id;
	int node;
	TP_r TP;
};
typedef struct cleartp_1_argument cleartp_1_argument;

struct cleartpname_1_argument {
	int id;
	char *tpnames;
};
typedef struct cleartpname_1_argument cleartpname_1_argument;

struct querytp_1_argument {
	int id;
	int node;
	int tpinterface;
	int tplen;
	u_long time;
	int epoch;
};
typedef struct querytp_1_argument querytp_1_argument;

#define RTESTPOINT 0x31001001
#define TPVERS 1

#if defined(__STDC__) || defined(__cplusplus)
#define REQUESTTP 1
extern  enum clnt_stat requesttp_1(int , int , TP_r , quad_t , resultRequestTP_r *, CLIENT *);
extern  bool_t requesttp_1_svc(int , int , TP_r , quad_t , resultRequestTP_r *, struct svc_req *);
#define REQUESTTPNAME 2
extern  enum clnt_stat requesttpname_1(int , char *, quad_t , resultRequestTP_r *, CLIENT *);
extern  bool_t requesttpname_1_svc(int , char *, quad_t , resultRequestTP_r *, struct svc_req *);
#define CLEARTP 3
extern  enum clnt_stat cleartp_1(int , int , TP_r , int *, CLIENT *);
extern  bool_t cleartp_1_svc(int , int , TP_r , int *, struct svc_req *);
#define CLEARTPNAME 4
extern  enum clnt_stat cleartpname_1(int , char *, int *, CLIENT *);
extern  bool_t cleartpname_1_svc(int , char *, int *, struct svc_req *);
#define QUERYTP 5
extern  enum clnt_stat querytp_1(int , int , int , int , u_long , int , resultQueryTP_r *, CLIENT *);
extern  bool_t querytp_1_svc(int , int , int , int , u_long , int , resultQueryTP_r *, struct svc_req *);
#define KEEPALIVE 6
extern  enum clnt_stat keepalive_1(int , int *, CLIENT *);
extern  bool_t keepalive_1_svc(int , int *, struct svc_req *);
extern int rtestpoint_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define REQUESTTP 1
extern  enum clnt_stat requesttp_1();
extern  bool_t requesttp_1_svc();
#define REQUESTTPNAME 2
extern  enum clnt_stat requesttpname_1();
extern  bool_t requesttpname_1_svc();
#define CLEARTP 3
extern  enum clnt_stat cleartp_1();
extern  bool_t cleartp_1_svc();
#define CLEARTPNAME 4
extern  enum clnt_stat cleartpname_1();
extern  bool_t cleartpname_1_svc();
#define QUERYTP 5
extern  enum clnt_stat querytp_1();
extern  bool_t querytp_1_svc();
#define KEEPALIVE 6
extern  enum clnt_stat keepalive_1();
extern  bool_t keepalive_1_svc();
extern int rtestpoint_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_TP_r (XDR *, TP_r*);
extern  bool_t xdr_resultRequestTP_r (XDR *, resultRequestTP_r*);
extern  bool_t xdr_resultQueryTP_r (XDR *, resultQueryTP_r*);
extern  bool_t xdr_requesttp_1_argument (XDR *, requesttp_1_argument*);
extern  bool_t xdr_requesttpname_1_argument (XDR *, requesttpname_1_argument*);
extern  bool_t xdr_cleartp_1_argument (XDR *, cleartp_1_argument*);
extern  bool_t xdr_cleartpname_1_argument (XDR *, cleartpname_1_argument*);
extern  bool_t xdr_querytp_1_argument (XDR *, querytp_1_argument*);

#else /* K&R C */
extern bool_t xdr_TP_r ();
extern bool_t xdr_resultRequestTP_r ();
extern bool_t xdr_resultQueryTP_r ();
extern bool_t xdr_requesttp_1_argument ();
extern bool_t xdr_requesttpname_1_argument ();
extern bool_t xdr_cleartp_1_argument ();
extern bool_t xdr_cleartpname_1_argument ();
extern bool_t xdr_querytp_1_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_RTESTPOINT_H_RPCGEN */

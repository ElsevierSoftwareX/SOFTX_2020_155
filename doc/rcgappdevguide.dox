/*! \page userguide RCG Application Developer Guide
\section ug0 1.0 Introduction
\verbatim
For the development of real-time controls application software, the LIGO Control and Data Systems (CDS) group has developed an automated real-time code generator (RCG). This RCG uses MATLAB Simulink as a graphical data entry tool to define the desired control algorithms. The resulting MATLAB .mdl file is then used by the RCG to produce software to run on an Advanced Ligo (aLIGO) CDS front end control computer.  

The software produced by the RCG includes:
•	A real-time code thread, with integrated timing, data acquisition and diagnostics.
•	Network interface software, using the Experimental Physics and Industrial Control System (EPICS) software and EPICS Channel Access. This software provides a remote interface into the real-time code.

\endverbatim

\section ug1 2.0 Document Overview
This document describes the means to develop a user application using the RCG. It contains the following sections: \n \n
	• Reference Section (3): The RCG produces software which integrates with various other components of CDS software. In addition, there are various files and services which must be configured prior to code operation. These items are covered under separate documentation, listed in the reference section.  \n
	• RCG Overview (4): Provides a brief description of the RCG, its components and resulting code threads. \n
	• Application Development (5): Provides the basics for developing an application using the RCG. \n
	• Software Execution (6): Describes how to start and stop the software application. \n
	• RCG Software Parts Library (7): Describes the various components supported by the RCG. \n
\n
\section ug17 3.0 References
Additional RCG design overview documentation can be found at the following links:\n

<a href="https://dcc.ligo.org/LIGO-T080135-v5">LIGO T080135 aLIGO CDS RCG Application Developers Guide in DCC</a> \n
<a href="https://dcc.ligo.org/LIGO-T0900612-v2">LIGO T0900612 aLIGO CDS Design Overview</a> \n

\ref rcgSect4 "4.0 RCG Overview" \n
\ref rcgSect5 "5.0 RCG Application Development" \n
\ref rcgSect6 "6.0 Running the RCG Application" \n
\ref rcgSect7 "7.0 RCG PARTS LIBRARY"

\section usg1 8.0 Scripting with kaTools
\ref KaTools "KaTools"

\ref rcgsg2a "Runtime Overview"

*/

/*! \page mdlExample Example Models

Parts from the CDS library are copied (drag and drop) to the user application window and then connected to show processing/signal flow.

This Simulink diagram is then saved to a user defined .mdl file, which is then processed by the RCG to provide the final real-time and supporting software which run on a CDS front end computer.
Many examples of models built for aLIGO use can be found within the CDS SVN Repository in the cds user apps section.
\section ex1 Example IOP Model
It is required that for each real-time Front End (FE) computer, that a special model be built to handle timing and I/O connections for all remaining user models to be run on that FE computer. This special case model is referred to as an Input/Output Processor (IOP) model. 
An example of a typical IOP model is shown in the following figures, the first of which is the “top” level, the second showing the detail of one of the top level subsystem parts, and finally the third, or bottom level of the code model. Some notes on the model layout: \n
\subsection iop1 Level 1
As a general rule, the top level of all aLIGO control models should only contain a \ref ParameterUse "Parameter" block (upper left), I/O parts and then remaining subsystem top level parts. This allows subsystem parts to become libary parts that can be shared between control models, with the only difference being the I/O channel connections specific to that particular control model. 
In the case of an IOP model, the I/O parts are NOT required to have connections, unless there is an intent to use some signals within the application code part of the IOP. In the example, it can be seen that the DAC modules are not connected to anything. Binary I/O modules, however, do require a ground input, only for model parsing reasons. 

GO TIt is required that the IOP model contain:
	- \ref ParameterUse "cdsParameter" Block with following settings:
		- adcMaster=1: This is what defines a model as an IOP model to the RCG.
		- specific_cpu=1 or not defined (as in example). The IOP must always be assigned to CPU core 1 on an FE computer. CPU 0 is reserved for Linux and CPU core 2 up to total number of available cores is reserved for user model applications.
		- If this FE computer is to be connected to the Dolphin real-time network, then pciRfm=1 must be set. This is only ever set in an IOP model ie not required for user models.
		- rate=64K: An IOP must always run at the ADC input clock frequency.
	- All of the \ref rcgSect71 "I/O modules" that will be installed in the I/O chassis connected to this FE computer. The primary purpose of the generated code will be to map and control all I/O devices that are to be addressed by user code running on this FE.
	- A Contec1616dio part. This particular module will be used to control the timing slave within the I/O chassis. It will not be available for use in user application models.

<b> NOTE: The IOP model only writes data to the DAC modules relayed from the user applications ie an IOP model can not be set up to write its own data to DAC channels. Also, I/O to binary I/O modules is done directly by the user application, with the IOP only providing memory mapping and initialization functions.</b>

\image html RCGexampl1.png "Example I/O Processor Model - Top Level"

\subsection iop2 Level 2
Within the next level, the ADC channels are broken out and applied to the next subsystem level. There are also two filter modules shown which support two primary diagnostics:
	- ADC Duotone: The timing slave provides a duotone signal to the last channel of the first ADC in the I/O chassis (960Hz/961Hz). The IOP code will check the zero crossing time of this signal once per second to verify correct timing in the system.
	- DAC Duotone: On operator request, the ADC duotone signal will be fed to the last output channel of the first DAC module, which is then directly connected back to the next to last channel of the first ADC module. Similar to the ADC duotone signal, a zero crossing calculation is done. This provides a total loopback time indication to verify DAC modules are clocking on time.

\image html RCGexampl2.png "Example I/O Processor Model - Subsystem Level 1"

\subsection iop3 Level 3
At the lowest level, an \ref EpicsOutputUse "EPICS Output" and \ref ExcTpUse "TestPoint" is connected to every ADC channel. This allows each channel to be displayed on the auto-generated ADC monitoring screens and provide on demand signal availability to the DAQ system for diagnostics at the full data rate (64K).

\image html RCGexampl3.png "Example I/O Processor Model - Subsystem Level 2"



\section ex2 Example User Application Model
A user application model is built in a similar fashion as the IOP model, example below.  The primary differences are:
	- \ref ParameterUse "cdsParameter" Block:
		- Must have adcSlave=1 set.
		- specific_cpu= must be set to 2 or higher, up to the number of cores available on the FE computer.
	- While IOP does not require connections to all I/O parts, user models do. Note, however, that not every channel of an I/O part needs to be connected. In the example, only one channel of two DAC modules are connected. The RCG allows sharing of DAC modules, ie another model running on the same FE may have the same DAC modules defined with connections to different channels. Verfication that two user models are not trying to use the same channel on the same DAC module is done at runtime. For ADC modules, any number of models may share the same modules and channels.

\image html userAppEx1.png "Example User Application Model - Top Level"
*/


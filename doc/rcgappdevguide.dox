/*! \page userguide RCG Application Developer Guide
This page introduces the RCG for users. \n\n
<b>RCG Overview</b> \n
The RCG uses MATLAB Simulink as a ‘drawing’ tool to allow for applications to be developed via a Graphical User Interface (GUI). A basic description of 
this process, the RCG itself, and resulting application software is provided in the following subsections.
        -\subpage appDev1 "Code Model Development Basics"
        	- \subpage rcgParts "RCG PARTS LIBRARY"
        -\subpage appDev2 "Code Model General Rules and Guidelines"
        -\subpage appDev3 "Code Model Compilation"
        -\subpage appDev4 "Code Execution"
        -\subpage autoMedm "Auto-generated MEDM Screens"

*/

/*! \page appDev1 Code Model Development Basics
Code development is done by graphically placing and connecting blocks in the MATLAB Simulink editor. The ‘building blocks’ supported by the RCG are included in the CDS_PARTS.mdl file.

Parts from the CDS library are copied (drag and drop) to the user application window and then connected to show processing/signal flow. A simple example is shown in the following figures, the first of which is the “top” level, the second showing the detail of one of the top level subsystem parts.
\n This example shows:\n
	• A CDS parameter block: This block must exist in all models. It is used by the RCG in setting code compile options and linking this application with various other components in a CDS distributed system. \n
	• A single, 32 channel ADC (Analog-to-Digital Converter; adc_0). \n
	• Tags used to connect ADC signals to subsystem parts (X1, X2) \n
	• A single, 16 channel DAC output block.\n
	• Within the subsystem level, selection of ADC channels and connection to CDS standard IIR filter modules. \n\n

This Simulink diagram is then saved to a user defined .mdl file, which is then processed by the RCG to provide the final real-time and supporting software which run on a CDS front end computer.
Many examples of models built for aLIGO use can be found within the CDS SVN Repository in the cds user apps section.
\image html RCGexampl1.png "Example Model - Top Level"
\image html RCGexampl2.png "Example Model - Subsystem Level"
*/

/*! \page appDev2 Code Model General Rules and Guidelines
\verbatim
Some overview notes before starting an application development process:
	1) Only modules shown in the CDS_PARTS.mdl file may be used in the application development. Simulink native parts that may be used are shown in the CDS_PARTS >> simLinkParts window. A description of all available parts is given in Section 7.
	2) The tool is designed to work with the LIGO CDS standard naming convention, which includes:
		a. All channel names shall be upper case.
		b. All channel names shall be of the form A1:SYS-SUBSYS_XXX_YYY where:
			i. A1 is the Interferometer (IFO) site and number, such as H1, H2, L1, M1, etc., followed by a colon (:). The IFO part of the name is set using the cdsParameters part in the application model (see example in next section).
			ii. SYS is a three letter system designator, such as SUS, ISI, SEI, LSC, ASC, etc., followed by a dash (-). 
			iii. SUBSYS and beyond are user definable, up to a maximum channel name length of 28 characters (limit set by EPICS software). 
			     Underscores are used to further break up the name, with any number of characters in between.
	3) The Matlab file name shall be of the form:
		a. IFO name (two characters eg h1.
		b. Subsystem name (three characters) eg sus, sei, isi, etc.
		c. Remainder of name is arbitrary, but should provide a further description of the system to be controlled and must make the name unique for a particular installation. 
		d. Examples for aLIGO:  h1susetmx, h1susetmy, h1seiham2. The RCG will pick off the first two characters as the interferometer (IFO) name and expect the next three characters to be the system name in order to produce a channel list consistent with (2) above.
	4) Every model shall contain one, and only one, Parameter Block (See 8.1.1).
	5) Every model shall contain at least one ADC part.
	6) For ease of duplication, the top level of models should be limited to I/O parts, with other parts nested in subsystem components. For example, the following model could easily be duplicated by simply changing the “QUAD1” subsystem block name to “QUAD2” and change a few parameter block entries to make a new model to perform the same controls on another suspension system.

\endverbatim
*/



/*! \page rcgParts RCG Parts Library
        - \subpage ParameterUse "Parameter Block"
        - \subpage rcgPartsIo "I/O Components"
        - \subpage rcgPartsSimulink "Standard Simulink Components"
        - \subpage rcgPartsEpics "EPICS Components"
        - \subpage rcgPartsFilts "FILTER Components"
        - \subpage rcgPartsMatrix "Matrix Components"
        - \subpage rcgPartsOscPhase "Oscillator/Phase Shifter Components"
        - \subpage rcgPartsWatchdogs "Watchdog Components"
        - \subpage CcodeUse "User Defined C Code Modules"
        - \subpage DaqChanUse "DAQ Channels"
\image html CDS_PARTS.tiff "RCG Parts Library"
*/
/*! \page rcgPartsIo RCG I/O Parts Library
The I/O Parts Libary within the CDS_PARTS.mdl contains all of the RCG components which support I/O modules/methods, as shown in the following figure.

        - \subpage AdcUse "ADC and ADC Selector"
        - \subpage DacUse "DAC Modules"
        - \subpage IPCxUse "Inter-Process Communication (IPCx)"
        - \subpage Contec6464DioUse "Contec DIO-6464L-PE Module"
        - \subpage DioUse "Acces 24bit Binary Input Module"
        - \subpage RioUse "Acces 8bit Relay I/O Module"
        - \subpage Rio1Use "Acces 16bit Relay I/O Module"
        - \subpage Contec6464DioUse "Contec DIO-6464L-PE Module"


\image html IoParts.tiff "CDS_PARTS I/O Library"
*/
/*! \page rcgPartsEpics RCG EPICS Parts Library
The EPICS Parts Libary within the CDS_PARTS.mdl contains all of the RCG components which support EPICS, as shown in the following figure.

        - \subpage EpicsInputUse "EPICS Input"
        - \subpage EpicsOutputUse "EPICS Output"
        - \subpage EpicsMomentaryUse "EPICS Momentary"
        - \subpage EpicsBinInUse "EPICS Binary Input"
        - \subpage EpicsRemoteIntlkUse "EPICS Remote Intlk"
        - \subpage EzcaUse "EPICS EZCA Read/Write"


        - \subpage EpicsStringInUse "EPICS String Input"
        - \subpage EpicsMbbiUse "EPICS Multi-bit Binary Input"
        - \subpage EpicsMbboUse "EPICS Multi-bit Binary Output"
        - \subpage EpicsCounterUse "EPICS Counter"

\image html EpicsParts.tiff "CDS_PARTS EPICS Library"
*/

/*! \page rcgPartsFilts RCG FILTER Parts Library
        - \subpage FiltUse "Standard IIR Filter Module"
        - \subpage FiltCtrlUse "Filter Module w/Control"
        - \subpage FiltCtrl2Use "Filter Module w/Control 2"
        - \subpage FiltPolyphaseUse "Polyphase FIR Filter Module"
        - \subpage trueRmsUse "True RMS"
        - \subpage ExcTpUse "GDS EXC/TP"
        - \subpage FiltBiquadUse "Biquad IIR Filter Module"

\image html filterMods.tiff "CDS_PARTS FILTER Library"
*/
/*! \page rcgPartsSimulink RCG Simulink Parts Library
The Simulink Parts Libary within the CDS_PARTS.mdl contains all of the standard Matlab parts which are supported by the RCG, as shown in the following figure.

        - \subpage UnitDelayUse "Unit Delay"
        - \subpage SubsystemUse "Matlab Subsystem"
        - \subpage MathFuncUse "Math Function"
        - \subpage FcnUse "Matlab Fcn"
        - \subpage GotoFromUse "GOTO/FROM"


\image html simParts.tiff "Simulink Library"
*/
/*! \page rcgPartsMatrix RCG Matrix Parts Library

        - \subpage MuxMatrixUse "MuxMatrix"
        - \subpage FiltMuxMatrixUse "Filter MuxMatrix"
        - \subpage BitWordUse "Bit2Word and Word2Bit"

\image html MatrixParts.tiff "Matrix Library"
*/
/*! \page rcgPartsOscPhase RCG Oscillator/Phase Shifter Library

        - \subpage PhaseUse "Phase"
        - \subpage WfsPhaseUse "WFS Phase"
        - \subpage OscUse "Oscillator"
        - \subpage NoiseUse "Noise Generator"
        - \subpage SatCountUse "Saturation Counter"

\image html OscPhase.tiff "OSC/Phase Library"
*/

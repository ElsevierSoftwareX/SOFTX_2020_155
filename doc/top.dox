/*!	\mainpage
This document is for RCG V2.6.

This documentation is divided into the following sections:
- \subpage intro 
- \subpage userguide "RCG User's Guide"
- \subpage devguidetop "CDS Code Design and Development"
	- \subpage devguidercg "RCG Software"
	- \subpage devguidedaqd "CDS DAQ Data Concentrator/Framebuilder Software"
	- \subpage devguidends "CDS DAQ Network Data Server (NDS) Software"
*/

/*! \page devguidetop RCG Software
This page links to code documentation for RCG code developers. \n
- \subpage devguidercg "RCG Software Developer's Guide"
- \subpage devguidedaqd "CDS DAQ Data Concentrator/Framebuilder Software"
- \subpage devguidends "CDS DAQ Network Data Server (NDS) Software"
*/

/*! \page devguidercg RCG Software Developer's Guide
This section is intended as a general guide for code modifications to the RCG parsers and compilers. \n\n
\b Introduction \n
\verbatim
The purpose of this documentation is to provide a description of the software which comprises the Real-time Code Generator (RCG). It is intended to be of sufficient detail for experienced software developers to modify, enhance or maintain the core RCG software. This includes the RCG compiler functions and the various RCG perl and C code components necessary to produce and compile the code that runs on the aLIGO real-time control computers.
\endverbatim
\b Overview \n
\verbatim
The RCG consists of four primary components: \n
	1) Matlab Simulink, which provides the Graphical User Interface (GUI) and text files which represent the code to be generated. In support of this, the RCG provides a standard parts library in the form of a library model file (CDS_PARTS.mdl).
	2) Perl parser scripts, which read the Matlab .mdl files and produce:
		a. C code file, in the form of a called subroutine, to be compiled for real-time execution.
		b. EPICS State Notation Language (SNL) code, which acts as the interface between the real-time software EPICS database records.
		c. EPICS database records, which act as the interface to the controls network via EPICS Channel Access (CA).
	3) Core header and C code files that are compiled as part of every application built by the RCG. 
	4) Standard set of configuration and Makefiles to compile the final executable kernel object.

\endverbatim

\subpage devguidercg4 "CDS Parts Library"
\verbatim
This section provides information on adding parts to the CDS Parts Library.
The CDS Parts Library consists of:
	- CDS_PARTS.mdl, which is a library of parts supported by the RCG. 
	- "Part".mdl, which is a library part created for each part supported by the RCG. This individual part is then incorporated into the CDS_PARTS.mdl.
	- "Part".pm, which is a Perl module written to support code generation for each part in the library.
\endverbatim
\subpage devguidercg2 "PERL Code Modules"
\verbatim
Perl scripts are used by the RCG to generate the real-time and supporting runtime code. This section describes those Perl modules and the products that they produce.
\endverbatim
	- \subpage devguidercg1 "Real-time C Code Modules"
	- \subpage devguidercg3 "Configuration and Makefiles"
*/
/*! \page devguidercg4 CDS Parts Library 
Placeholder for top level CDS_PARTS.
\par \b Overview
\verbatim
Matlab is used as the GUI to allow the “application programmer” to define a control process via a graphical diagram. The output of Matlab is a text file, which describes the various parts and their connections. This text (.mdl) file is then used by the RCG in the compilation process.
All parts that RCG supports are contained in the CDS_PARTS.mdl library file in the $ROOT/src/epics/simLink directory, where $ROOT is the top level directory of the particular advLigoRTS checkout. Graphical representations of the individual parts in this library are contained in the simLink/lib directory. Note that the CDS_PARTS are only graphical parts which contain information necessary for the RCG parsers in compiling code. They are not true Matlab parts, as they have no Matlab code associated with them.

\endverbatim
\image html CDS_PARTS.tiff "CDS Parts Library"
\par \b Adding a new part to the library.
\verbatim
There are three steps involved in creating a new library part to the RCG:
	1) Creating a GUI component in RCG_LIB/src/epics/simLink/lib.
	2) Adding the new GUI component to the CDS_PARTS.mdl libary file.
	3) Adding supporting Perl scripts.
\endverbatim
\par Adding GUI library part.
\par Adding GUI part to CDS_PARTS.mdl
\par Adding code generation Perl module.
*/
/*! \page devguidercg3 Configuration and Makefiles 
Placeholder for top level configurationa and makefile info.
*/

/*! \page devguidercg1 Real-time C Code Modules
	- \ref rts \n
	- \ref filters \n
	- \ref daq
	- \ref iod
	- \ref rtnet
	- \ref head
	- \ref supp
	- \ref test

*/

/*! \page devguidercg2 RCG PERL CODE MODULES 
\b Overview
\verbatim
This section describes the various Perl code modules which provide for parsing of Matlab files and produce the final code executables. These Perl modules are located in $RCG_SRC_DIR/src/epics/util.

Once the Matlab model has been built and .mdl file saved, the RCG build process is executed using a standard “make” command. Prior to this process, a “build” directory needs to be established and configured. This is done by:
	1) Creating a directory, typically in the /opt/rtcds/<site>/<ifo> directory. This area is designated $BUILD for the remainder of this document.
	2) Moving into that directory and, from the command line, executing $ROOT/configure. 
 The latter will create a Makefile and produce subdirectories needed in the make process. Once this is done, executing ‘make modelname’ will invoke the various RCG Perl scripts and compilers to produce runtime executable code and various supporting configuration files. Invoking ‘make install-modelname will then install all of the generated objects to appropriate target directories to load the software onto the real-time control computers.

\endverbatim
<b>RCG MATLAB parsing files:</b>
	- \ref feCodeGen.dox "feCodeGen.pl" \n
	- \ref Parser3.dox "lib/Parser3.pm" \n
	- \ref Util.dox "lib/Util.pm" \n
	
\verbatim
To develop executable software from the Matlab file, the RCG basically has to do two things:
	1) Find all of the parts defined in the file, for which code will be substituted.
	2) Find all the links between parts to determine the processing sequence.

The Perl scripts and modules that perform these functions are located in the $ROOT/src/epics/util (Perl scripts) and $ROOT/src/epics/util/lib directories (Perl modules). The first script invoked by the make command is feCodeGen.pl. This script essentially has three parts:
	1) Find all the parts and links between parts. This is done with the help of the lib/Parser3.pm module. At the end of this step, a diags.txt file is produced in the build directory under src/epics/util. This file contains a list of all parts found and all inputs/outputs to/from each part. This file is not used in the remaining build process, but may be a useful diagnostic tool for code developers if the build process does not complete successfully.
	2) The script produces an ordered execution list for all of the parts. The basic concept here is that a part gets added to the execution sequence list when, and only when, all of the parts that provide input for this part are already on the execution list. The first items placed on the execution list are those parts which either do not require an input from another part, or have only one input connection and that input connection is from an ADC module. Once these items are placed in the list, the script continues to loop over the remaining parts until all part input requirements have been satisfied or the code finds that there are connection errors in the Matlab model.
	3) Writing of source code and header files. The script now runs through the execution parts list, essentially substituting source code for each part. Some of this substitution is handled directly by feCodeGen.pl, and others are handled by Perl modules located in the epics/util/lib directory. As a general rule, parts that are supported by Matlab itself, as depicted in the CDS_PARTS.mdl, Simulink Parts subsystem block, are handled by the feCodeGen.pl script itself, with all other parts using the supporting Perl modules.


\endverbatim

<b>EPICS Database / Code Generation</b>
	- \ref fmseq.dox "fmseq.pl" \n
	
\verbatim
Another Perl script, $ROOT/src/epics/util/fmseq.pl, is invoked to generate the EPICS interface side of the code. This script reads in the following files to obtain system information and produce the EPICS products:
	1) The model name text file produced by feCodeGen.pl in the $BUILD/src/epics/fmseq directory.
	2) The skeleton.st and skeleton.db files located in the $ROOT/src/epics/util directory. The skeleton.st file is the template for generation of EPICS SNL code, which fmseq will fill in with model specific items. The skeleton.db file is a template of all EPICS records to be produced for filter modules.

From the text file in epics/fmseq, the fmseq script will develop the following products in the $BUILD/build/<modelname>epics directory.
	1) EPICS SNL code (modelname.st). This code will be used to move data between the EPICS database records and the real-time code via shared memory on the real-time computer.
	2) EPICS database (modelname.db file). The database records will allow data to be communicated on the control system networks to various EPICS compatible software tools, such as operator display graphical user interfaces.
	3) A Data Acquisition (DAQ) channel list file (modelname.ini). This file is read by both the real-time code and DAQ software to acquire data at runtime. As of RCG V2.5, channels to be acquired and saved to disk are listed within the application models via a new DAQ part. 
	4) A Global Diagnostics channel list (modelname.par). This file is used by the real-time code and DAQ system to provide a list of all data channels available “on demand” as testpoints or excitation entry points.

As the make process continues, the SNL code will be run through the SNL precompiler and then GNU compiler to produce exectuables in the $BUILD/target/<modelname>epics directory. The final startup scripts and databases are also generated here, for later movement to the runtime target directory when make install is invoked. 

\endverbatim

<b>CDS PARTS Support </b>\n
\verbatim
All of the cdsPart.pm modules contain the same sub components, such that they can be easily developed and “plugged into” the RCG package. These sub components are:
	1) sub partType: Returns the part type information to the RCG for use in later code generation calls. This part type must be unique.
	2) sub printHeaderStruct: Includes EPICS definitions to be installed in the modelname.h file, which is later used to develop the EPICS to real-time interface definition.
	3) sub printEpics: List of EPICS channels associated with this application, in the form need by fmseq.pl (described in next section).
	4) sub printFrontEndVars: List of variables to be used by this part that need to be defined in the real-time C source.
	5) sub frontEndInitCode: Any code required during the initialization of the real-time code.
	6) sub fromExp: Code to be inserted when another part requires data from this part.
	7) sub frontEndCode: Source that defines the processing to be performed when this part is executed.
\endverbatim

The following PERL modules support individual parts in the RCG Library. \n
These are all located in the epics/util/lib directory.\n\n
\par I/O Parts
	- \ref Adc.dox "Adc.pm" \n
	- \ref Dac.dox "Dac.pm" \n
	- \ref Dac18.dox "Dac18.pm" \n
	- \ref IPCx.dox "IPCx.pm" \n
	- \ref CDI64.dox "CDI64.pm" \n
	- \ref CDO64.dox "CDO64.pm" \n
	- \ref Rio.dox "Rio.pm" \n
	- \ref Rio1.dox "Rio1.pm" \n

\par EPICS Parts
	- \ref EpicsBinIn.dox "EpicsBinIn.pm" \n
	- \ref EpicsIn.dox "EpicsIn.pm" \n
	- \ref EpicsOut.dox "EpicsOut.pm" \n
	- \ref EpicsMomentary.dox "EpicsMomentary.pm" \n
	- \ref EzCaRead.dox "EzCaRead.pm" \n
	- \ref EzCaWrite.dox "EzCaWrite.pm" \n


	- \ref DacKill.dox "DacKill.pm" \n
	- \ref Filt.dox "Filt.pm" \n
	- \ref FiltCtrl.dox "FiltCtrl.pm"\n
	- \ref FiltCtrl2.dox "FiltCtrl2.pm\n
	- \ref FiltMuxMatrix.dox "FiltMuxMatrix.pm\n
	- \ref FunctionCall.dox "FunctionCall.pm\n
	- \ref Parameters.dox "Parameters.pm" \n
	- \ref Osc.dox "Osc.pm" \n
	- \ref Matrix.dox "Matrix.pm" \n
	- \ref MuxMatrix.dox "MuxMatrix.pm" \n
	- \ref Noise.dox "Noise.pm" \n
	- \ref Phase.dox "Phase.pm" \n
	- \ref medmGen.dox "medmGen.pm" \n
	- \ref EXC.dox "EXC.pm" \n
	- \ref fcn.dox "Fcn.pm" \n
*/
/*! \page devguidedaqd CDS DAQ Data Concentrator/Framebuilder Software
*/
/*! \page devguidends CDS DAQ Network Data Server (NDS) Software
	- \ref nds
*/

///	\defgroup nds NDS Software Components
///	@{
///	@class CDS_NDS::Nds
///	@class CDS_NDS::daqd_net
///	@class CDS_NDS::Spec
///	@struct CDS_NDS::reconfig_data_t
///	@struct CDS_NDS::raw_trend_record_struct
///	@file	nds.hh
///	@file	daqd_net.hh
///	@}
///	\defgroup rtc Real-time Software
///	@{
///	\defgroup rts Real-time Sequencer and Initialization Software
///	@{
///	@file controller.c
///	@file moduleLoad.c
///	@}

///	\defgroup filters Digital Filtering
///	@{
///	\defgroup filtRt Realtime
///	@{
///	@file fm10Gen.c
///	@file epicsXfer.c
///	@file inputFilterModule.h
///	@file inputFilterModule1.h
///	@}
///	\defgroup filtEpics EPICS
///	@{
///	@file fmReadCoeff.c 
///	@}
///	@}

///	\defgroup daq Data Acquisition
///	@{
///	\defgroup daqrt DAQ Realtime
///	@{
///	@file daqLib.c
///	@}
///	\defgroup daqNet DAQ Network
///	@{
///	@file mx_stream.c
///	@}
///	\defgroup daqEpics DAQ EPICS
///	@{
///	@file param.c
///	@}
///	@}

///	\defgroup iod PCIe Module I/O Drivers
///	@{
///	@file map.c
///	@file timing.c
///	@file accesDio24.c
///	@file accesIIRO8.c
///	@file accesIIRO16.c
///	@file contec1616.c
///	@file contec32o.c
///	@file contec6464.c
///	@file gsc16ai64.c
///	@file gsc16ao16.c
///	@file gsc18ao8.c
///	@file spectracomGPS.c
///	@file symmetricomGps.c
///	@file vmic5565.c
///	@}
///	\defgroup rtnet Real-Time Networking
///	@{
///	@file commData2.c 
///	@file dolphin.c
///	@}
///	\defgroup head Headers
///	@{
///	@file commData2.h 
///	@file controller.h 
///	@file feComms.h 
///	@file daqmap.h 
///	@file crc.h 
///	@file fmReadCoeff.h 
///	@}
///	\defgroup supp Support
///	@{
///	@file crc.c 
///	@file rfm.c 
///	@file susWatchdogFilters.c 
///	@}
///	\defgroup test Test Results
///	@{
///	@file dackillTestData.dox
///	@file tpTestData.dox
///	@file ipcTestData.dox
///	@file duotoneTestData.dox
///	@file fmc2TestData.dox
///	@}
///	@}
///	\defgroup rcg RCG Perl Modules
///	@{
///	@file Adc.dox 
///	@file IPCx.dox
///	@file FiltCtrl2.dox
///	@}


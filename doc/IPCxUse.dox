/*! \page IPCxUse Inter-Process Communication (IPCx)
\section ipcUse1 Overview
The purpose of these modules is to allow inter-process communications (IPC), via a PCI Express (PCIE) Network or via a Reflected Memory (RFM) Network for applications running on different computers or via Shared Memory (SHMEM) for real-time processes running on the same computer (but on separate CPU cores).  
\section ipcUse2 Related Documentation
<a href="https://dcc.ligo.org/cgi-bin/private/DocDB/ShowDocument?docid=21936">T1000587 CDS IPC Software Design</a> \n\n
\section ipcUse3 General Description and Use within an RCG model.
Three IPC parts are provided, usage dependent on the communication media:
	- Internal computer shared memory (cdsIPCx_SHMEM)
	- Computer to Computer via Dolphinic PCIe network (cdsIPCx_PCIE)
	- Computer to Computer via GEFANUC Reflected Memory (RFM) network (cdsIPCx_RFM)
		- Note that the RCG software supports up to 2 RFM networks, therefore card=# must be specified. At the LHO/LLO site:
			- card 0 = X arm network
			- card 1 = Y arm network

When placed in the user model, the NAME field must be changed to uniquely identify this channel, as it becomes the reference used by all models to connect to this particular channel. IPC names, and associated information, are written into an IFO common IPC file, located in /opt/rtcds/site/ifo/chans/ipc directory.

The IPC must also be identified as either a SENDER or RECEIVER. 
	- A SENDER module is defined by having a signal attached to its input, but NO signal attached to its outputs (‘Out’ and ‘Err’).  Its name and IPC info will be written to the IPC file on compilation. 
	- A RECEIVER module, as shown below, is defined by:
		- Having a channel name corresponding to a SENDER in another module. NOTE: Model will compile only if:
			- Model with corresponding SENDER has been compiled, and 
			- SENDER name is valid ie exists in IPC file.
		- Having a “Ground” attached to its input and the output signal attached to some other module (e.g., and EPICS output module, a Filter module, etc.).  The ‘Err’ output is only defined for RECEIVER modules and it can either be attached to some other module or be left un-attached.
	\image html IpcPart2.png "IPC example" width=50cm
\section ipcUse4 EPICS Channels 
EPICS channels are autogenerated only for RECEIVER modules, and only for diagnostic purposes. Channel names are taken from the model name in the form:
	IFO:SYS-NAM_IPC_IPCNAME_, where:
		- IFO = first two chars of model name
		- SYS = Next three (3) chars of model name
		- NAM = Remaining chars of model name
		- IPCNAME = Name given to IPC part
In this form, three EPICS channels are produced for each reciever IPC part:
	- IFO:SYS-NAM_IPC_IPCNAME_ER = Errors detected / sec.
	- IFO:SYS-NAM_IPC_IPCNAME_ET = Time when errors last detected, in GPS seconds.
	- IFO:SYS-NAM_IPC_IPCNAME_PS = Status (0=Fault, 1=OK).
\section ipcUse5 Auto Generated MEDM Screens
A single EPICS MEDM screen is produced for each model containing diagnostics information as provided by the above EPICS channels. The file name is of the form MODELNAME_IPC_STATUS.adl. \n
The example below shows the various fields provided in the screen:
	- SIGNAL NAME: Name of the signal being received.
	- SEND COMP: Name of the computer from which signal is being sent.
	- SENDER MODEL: Name of the control model from which signal is being sent.
	- IPC TYPE: Communication mechanism/network.
	- STATUS: RED/GREEN indicator of IPC faults. Upon detection of fault, this indicator remains latched RED until "DIAG RESET" is pushed on GDS_TP screen.
	- ERR/SEC: Errors detected per second. If errors are continuing, this field will update every second. If errors have stopped, number will be latched, as with STATUS above.
	- ERR TIME: GPS time of the last error detection. If errors are continuing, this field will update every second. If errors have stopped, number will be latched, as with STATUS above.
	
\image html IPCxMedm.png "AutoGen IPC MEDM Screen" width=50cm

*/
